import { ColumnType, Insertable, Selectable, Updateable } from 'kysely'

export interface Database {
  transactions: TransactionsTable
  userData: UserDataTable
}

// This interface describes the `transactions` table to Kysely. Table
// interfaces should only be used in the `Database` type above
// and never as a result type of a query!. See the types below
export interface TransactionsTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  // id: Generated<number>
  userId: string
  id: string
  isIncome: boolean
  isSavings: boolean
  amount: number
  name: string
  category: string
  transactionType: string
  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `created_at` that is selected as
  // a `Date`, has to be provided as a `string` in inserts and
  // can never be updated:
  createdAt: ColumnType<Date, Date, Date | null>
  stoppedAt: ColumnType<Date | null, Date | null, Date | null>
}

// You should not use the table schema interfaces directly. Instead, you should
// use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
// make sure that the correct types are used in each operation.
//
// Most of the time you should trust the type inference and not use explicit
// types at all. These types can be useful when typing function arguments.
export type Transaction = Selectable<TransactionsTable>
export type NewTransaction = Insertable<TransactionsTable>
export type TransactionUpdate = Updateable<TransactionsTable>

export interface UserDataTable {
  userId: string
  categories: string
  grouped: ColumnType<boolean, boolean | null, boolean | null>
  percentage: ColumnType<boolean, boolean | null, boolean | null>
  includeSavings: ColumnType<boolean, boolean | null, boolean | null>
  includeEmptyCategories: ColumnType<boolean, boolean | null, boolean | null>
}

export type UserData = Selectable<UserDataTable>
export type NewUserData = Insertable<UserDataTable>
export type UserDataUpdate = Updateable<UserDataTable>
